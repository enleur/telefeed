// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createFeed = `-- name: CreateFeed :one
INSERT INTO feeds (url, title)
VALUES (?, ?)
    RETURNING id, url, title, last_fetched_at, created_at
`

type CreateFeedParams struct {
	Url   string
	Title sql.NullString
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed, arg.Url, arg.Title)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.Title,
		&i.LastFetchedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteFeed = `-- name: DeleteFeed :exec
DELETE FROM feeds
WHERE id = ?
`

func (q *Queries) DeleteFeed(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteFeed, id)
	return err
}

const getFeed = `-- name: GetFeed :one
SELECT id, url, title, last_fetched_at, created_at FROM feeds
WHERE id = ? LIMIT 1
`

func (q *Queries) GetFeed(ctx context.Context, id int64) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getFeed, id)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.Title,
		&i.LastFetchedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listFeeds = `-- name: ListFeeds :many
SELECT id, url, title, last_fetched_at, created_at FROM feeds
ORDER BY created_at
`

func (q *Queries) ListFeeds(ctx context.Context) ([]Feed, error) {
	rows, err := q.db.QueryContext(ctx, listFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feed
	for rows.Next() {
		var i Feed
		if err := rows.Scan(
			&i.ID,
			&i.Url,
			&i.Title,
			&i.LastFetchedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFeedLastFetched = `-- name: UpdateFeedLastFetched :exec
UPDATE feeds
SET last_fetched_at = ?
WHERE id = ?
`

type UpdateFeedLastFetchedParams struct {
	LastFetchedAt sql.NullTime
	ID            int64
}

func (q *Queries) UpdateFeedLastFetched(ctx context.Context, arg UpdateFeedLastFetchedParams) error {
	_, err := q.db.ExecContext(ctx, updateFeedLastFetched, arg.LastFetchedAt, arg.ID)
	return err
}
